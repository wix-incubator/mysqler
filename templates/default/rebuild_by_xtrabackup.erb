#!/bin/bash 

# Generated by Chef for <%= node["fqdn"] %>. 
# Local modifications will be overwritten. 
# Cookbook: <%= node['mysqler']["templates_cookbook"] %> 
# Template: rebuild_by_xtrabackup.erb

DEBUG=1
rebuild_dir="<%= node['mysqler']["mysql_rebuild"]["rebuilddir"] %>/`date +'%Y%m%d%H%M'`"
rebuild_from_master=<%= @rebuild_from_master %>
defaults_file="--defaults-file=<%= node['mysqler']['defaults-file'] %>"
pass='<%= @host_password %>'
xbstream="xbstream -v -x -C  $rebuild_dir "
remote_host='<%= @dumped_host %>'
remote_password='<%= @dumped_password %>'
remote_user='<%= @dumped_user %>'
remote_ssh="ssh $remote_user@$remote_host -i ~${remote_user}/.ssh/id_rsa -p<%= node['mysqler']["mysql_rebuild"]["ssh_port"] %> -o StrictHostKeyChecking=no"
innobackupex="nice -n 19 ionice -c 3 -t innobackupex $defaults_file --password=$remote_password --no-lock --safe-slave-backup --slave-info --stream=xbstream --tmpdir=/tmp . "
innobackupes_apply_log="innobackupex ${defaults_file} --password=$pass --apply-log $rebuild_dir"
remote_command="$innobackupex| gzip "
#transfer_command="ssh ${remote_user}@<%= node['fqdn'] %> -p<%= node['mysqler']["mysql_rebuild"]["ssh_port"] %> -o StrictHostKeyChecking=no \"gunzip - | $xbstream\""
complete_command="$remote_ssh \"$remote_command \" | gunzip - | $xbstream"
replica_user='<%= @replica_user %>'
replica_pass='<%= @replica_password %>'
rebuilding_file='<%= @rebuilding_file %>'

lock_file='<%= (defined? Chef::Config::start_handlers[0].lock_file) ? Chef::Config::start_handlers[0].lock_file : '/tmp/chef.lock' %>'


mysql_command="mysql ${defaults_file} -p$pass"

function log {
  msg=$1
  echo "`date` - $msg" >> $rebuilding_file
}

log "============================================================="
#run in the background
(
log "Running mysql restore from $remote_host by xtrabackup locking chef" 
echo "running mysql restore from $remote_host by xtrabackup locking chef" > $lock_file

log "Creating rebuild directory  $rebuild_dir"
mkdir -p $rebuild_dir
chmod 777 $rebuild_dir

log "Started xtrabackup" 
eval $complete_command > /dev/null

#verify innobackpuex exited successfully

grep 'innobackupex:' $rebuilding_file | tail -1 | grep 'completed OK!'
if [ $? -ne 0 ]; then
   log "Xtrabackup failed. Please check the logs to find the failure reason"
   exit 1
fi

#verify that the data exists
dir_size=`du $rebuild_dir | cut -f 1`

log "Rebuild directory is of size '$dir_size'"
if [ $dir_size -lt 5 ]; then
  log "No data in destination directory. Check permissions to access remote server"
  exit 1
fi 

log "Started apply log"
eval $innobackupes_apply_log

log "Stopping mysql server"
<%= node['mysqler']['initscript'] %> stop

if [ $? -eq 0 ]; then
  dirs_to_delete=$(for i in <%= %w( datadir journaldir binarydir ).map { |x| node['mysqler'][x] }.join(' ')  %>; do echo $i; done | sort -u)

  log "Stopped mysql server"
  for folder in $dirs_to_delete
  do
    log "Delete folders content $folder"
    rm -fr $folder/*
  done 

  log "Move journal files to journal directory"
  mv $rebuild_dir/ib_logfile* <%= node['mysqler']["journaldir"] %>/

  log "Move retereived backup to data directory"
  mv $rebuild_dir/* <%= node['mysqler']["datadir"] %>
  
  chown -R mysql:mysql <%= node['mysqler']['homedir'] %>
  chmod -R 750 <%= node['mysqler']['homedir'] %>

  log "Starting mysql server"
  <%= node['mysqler']['initscript'] %> start
  res=$?
  log "start server result is  $res"
  if [ $res -eq 0 ]; then
    log "Mysql server started"
    #the replication magic
    
    echo rebuild_from_master $rebuild_from_master
    if [ $rebuild_from_master -eq 1 ] ; then
      #rebuild from slave
      change_master_cmd="`cat <%= node['mysqler']["datadir"] %>/xtrabackup_binlog_info | awk -v q="'" '{print "CHANGE MASTER TO MASTER_LOG_FILE=" q $1 q ", MASTER_LOG_POS=" $2 }'`,  MASTER_HOST='$remote_host', master_user='$replica_user', master_password='$replica_pass'; start slave; " 
    else  
      change_master_cmd="`cat <%= node['mysqler']["datadir"] %>/xtrabackup_slave_info`, MASTER_HOST='<%= @master_host %>', master_user='$replica_user', master_password='$replica_pass'; start slave; "
    fi
    #remove xtraba
    log "Setting up the server as a slave"
    echo $change_master_cmd | $mysql_command
  else
     log "Can not start myslq server"
  fi
else
  log "Failed. Can not stop mysql"
  return 1
fi
log "Finish"
/bin/rm $lock_file
) & disown



